// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("signerId", Value.fromString(""));
    this.set("swap", Value.fromStringArray(new Array(0)));
    this.set("liquidity", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get signerId(): string {
    let value = this.get("signerId");
    return value!.toString();
  }

  set signerId(value: string) {
    this.set("signerId", Value.fromString(value));
  }

  get blockTimestamp(): BigInt | null {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("blockTimestamp");
    } else {
      this.set("blockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get swap(): Array<string> {
    let value = this.get("swap");
    return value!.toStringArray();
  }

  set swap(value: Array<string>) {
    this.set("swap", Value.fromStringArray(value));
  }

  get liquidity(): Array<string> {
    let value = this.get("liquidity");
    return value!.toStringArray();
  }

  set liquidity(value: Array<string>) {
    this.set("liquidity", Value.fromStringArray(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Swap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get output(): string | null {
    let value = this.get("output");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set output(value: string | null) {
    if (!value) {
      this.unset("output");
    } else {
      this.set("output", Value.fromString(<string>value));
    }
  }

  get action(): string | null {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set action(value: string | null) {
    if (!value) {
      this.unset("action");
    } else {
      this.set("action", Value.fromString(<string>value));
    }
  }

  get blockTimestamp(): BigInt | null {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("blockTimestamp");
    } else {
      this.set("blockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get firstTokenAmount(): BigInt | null {
    let value = this.get("firstTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("firstTokenAmount");
    } else {
      this.set("firstTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get firstToken(): string | null {
    let value = this.get("firstToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set firstToken(value: string | null) {
    if (!value) {
      this.unset("firstToken");
    } else {
      this.set("firstToken", Value.fromString(<string>value));
    }
  }

  get secondTokenAmount(): BigInt | null {
    let value = this.get("secondTokenAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set secondTokenAmount(value: BigInt | null) {
    if (!value) {
      this.unset("secondTokenAmount");
    } else {
      this.set("secondTokenAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get secondToken(): string | null {
    let value = this.get("secondToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set secondToken(value: string | null) {
    if (!value) {
      this.unset("secondToken");
    } else {
      this.set("secondToken", Value.fromString(<string>value));
    }
  }
}

export class AddLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddLiquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AddLiquidity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AddLiquidity", id.toString(), this);
    }
  }

  static load(id: string): AddLiquidity | null {
    return changetype<AddLiquidity | null>(store.get("AddLiquidity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): BigInt | null {
    let value = this.get("poolId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolId(value: BigInt | null) {
    if (!value) {
      this.unset("poolId");
    } else {
      this.set("poolId", Value.fromBigInt(<BigInt>value));
    }
  }

  get output(): string | null {
    let value = this.get("output");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set output(value: string | null) {
    if (!value) {
      this.unset("output");
    } else {
      this.set("output", Value.fromString(<string>value));
    }
  }

  get blockTimestamp(): BigInt | null {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("blockTimestamp");
    } else {
      this.set("blockTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get functionCalled(): string | null {
    let value = this.get("functionCalled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set functionCalled(value: string | null) {
    if (!value) {
      this.unset("functionCalled");
    } else {
      this.set("functionCalled", Value.fromString(<string>value));
    }
  }

  get functionAction(): string | null {
    let value = this.get("functionAction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set functionAction(value: string | null) {
    if (!value) {
      this.unset("functionAction");
    } else {
      this.set("functionAction", Value.fromString(<string>value));
    }
  }

  get firstPoolAmount(): BigInt | null {
    let value = this.get("firstPoolAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstPoolAmount(value: BigInt | null) {
    if (!value) {
      this.unset("firstPoolAmount");
    } else {
      this.set("firstPoolAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get firstPool(): string | null {
    let value = this.get("firstPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set firstPool(value: string | null) {
    if (!value) {
      this.unset("firstPool");
    } else {
      this.set("firstPool", Value.fromString(<string>value));
    }
  }

  get secondPoolAmount(): BigInt | null {
    let value = this.get("secondPoolAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set secondPoolAmount(value: BigInt | null) {
    if (!value) {
      this.unset("secondPoolAmount");
    } else {
      this.set("secondPoolAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get secondPool(): string | null {
    let value = this.get("secondPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set secondPool(value: string | null) {
    if (!value) {
      this.unset("secondPool");
    } else {
      this.set("secondPool", Value.fromString(<string>value));
    }
  }

  get sharesMinted(): BigInt | null {
    let value = this.get("sharesMinted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sharesMinted(value: BigInt | null) {
    if (!value) {
      this.unset("sharesMinted");
    } else {
      this.set("sharesMinted", Value.fromBigInt(<BigInt>value));
    }
  }
}
